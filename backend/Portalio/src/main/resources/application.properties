spring.application.name=Portalio

#env
spring.config.import=optional:file:.env[.properties]

# MySQL EC2 Setting
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DB}
spring.datasource.username=${MYSQL_USER}
spring.datasource.password=${MYSQL_PASSWORD}

#spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Insert data into the database after the schema is created. Data is Definded in data.sql.
spring.sql.init.mode=always
spring.sql.init.encoding=UTF-8
spring.jpa.defer-datasource-initialization=true

# MongoDB Setting
# spring.data.mongodb.host=localhost
# spring.data.mongodb.port=27017
# spring.data.mongodb.database=portalio
spring.data.mongodb.uri=${MONGO_URI}


# JPA Setting
spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# JWT SecretKey
spring.jwt.secret=${JWT_SECRET_KEY}

# nginx forward-header-strategy
server.forward-headers-strategy=framework

# trace SQL
## Log Hibernate SQL statements through logger
logging.level.org.hibernate.SQL=debug
## Parameter tracing
logging.level.org.hibernate.type=trace

# Swagger UI ???
springdoc.swagger-ui.enabled=true

# S3
cloud.aws.credentials.access-key=${AWS_CREDENTIALS_ACCESSKEY}
cloud.aws.credentials.secret-key=${AWS_CRETENDIALS_SECRETKEY}
cloud.aws.s3.bucket-name=${AWS_S3_BUCKETNAME}
cloud.aws.region.static=${AWS_REGION_STATIC}
cloud.aws.stack.auto=false




spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

# oAuth
# google
# registration
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
# spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}
spring.security.oauth2.client.registration.google.redirect-uri=https://k11d202.p.ssafy.io/login/oauth2/code/google
# spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=email, profile


# naver
# registration
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri=https://k11d202.p.ssafy.io/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name, email, profile_image

# provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response
